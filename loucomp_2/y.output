Terminals which are not used

   ENDFILE
   ERROR


State 36 conflicts: 1 reduce/reduce
State 99 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decl_list

    2 decl_list: decl_list decl
    3          | decl

    4 decl: var_decl
    5     | func_decl

    6 var_decl: type ID SEMI
    7         | type ID LBRACKET NUM RBRACKET SEMI

    8 type: INT
    9     | VOID

   10 func_decl: type ID LPAREN params RPAREN compound

   11 params: param_list
   12       | VOID

   13 param_list: param_list COMMA param
   14           | param

   15 param: type ID
   16      | type ID LBRACKET RBRACKET

   17 compound: LBRACE local_decls stmt_list RBRACE

   18 local_decls: local_decls var_decl
   19            | /* empty */

   20 stmt_list: stmt_list stmt
   21          | /* empty */

   22 stmt: exp_stmt
   23     | compound
   24     | if_stmt
   25     | while_stmt
   26     | return_stmt
   27     | error

   28 exp_stmt: exp SEMI
   29         | SEMI

   30 if_stmt: IF LPAREN exp RPAREN stmt
   31        | IF LPAREN exp RPAREN stmt ELSE stmt

   32 while_stmt: WHILE LPAREN exp RPAREN stmt

   33 return_stmt: RETURN SEMI
   34            | RETURN exp SEMI

   35 exp: var ASSIGN exp
   36    | simple_exp

   37 var: ID
   38    | ID LBRACKET exp RBRACKET

   39 simple_exp: add_exp relop add_exp
   40           | add_exp

   41 relop: LE
   42      | LT
   43      | GT
   44      | GE
   45      | EQ
   46      | NE

   47 add_exp: add_exp addop term
   48        | term

   49 addop: PLUS
   50      | MINUS

   51 term: term mulop factor
   52     | factor

   53 mulop: TIMES
   54      | OVER

   55 factor: LPAREN exp RPAREN
   56       | var
   57       | call
   58       | NUM
   59       | error

   60 call: ID LPAREN args RPAREN

   61 args: arg_list
   62     | /* empty */

   63 arg_list: arg_list COMMA exp
   64         | exp


Terminals, with rules where they appear

$end (0) 0
error (256) 27 59
IF (258) 30 31
ELSE (259) 31
WHILE (260) 32
RETURN (261) 33 34
INT (262) 8
VOID (263) 9 12
ID (264) 6 7 10 15 16 37 38 60
NUM (265) 7 58
ASSIGN (266) 35
EQ (267) 45
NE (268) 46
LT (269) 42
LE (270) 41
GT (271) 43
GE (272) 44
PLUS (273) 49
MINUS (274) 50
TIMES (275) 53
OVER (276) 54
LPAREN (277) 10 30 31 32 55 60
RPAREN (278) 10 30 31 32 55 60
LBRACKET (279) 7 16 38
RBRACKET (280) 7 16 38
LBRACE (281) 17
RBRACE (282) 17
SEMI (283) 6 7 28 29 33 34
COMMA (284) 13 63
ENDFILE (285)
ERROR (286)


Nonterminals, with rules where they appear

$accept (32)
    on left: 0
program (33)
    on left: 1, on right: 0
decl_list (34)
    on left: 2 3, on right: 1 2
decl (35)
    on left: 4 5, on right: 2 3
var_decl (36)
    on left: 6 7, on right: 4 18
type (37)
    on left: 8 9, on right: 6 7 10 15 16
func_decl (38)
    on left: 10, on right: 5
params (39)
    on left: 11 12, on right: 10
param_list (40)
    on left: 13 14, on right: 11 13
param (41)
    on left: 15 16, on right: 13 14
compound (42)
    on left: 17, on right: 10 23
local_decls (43)
    on left: 18 19, on right: 17 18
stmt_list (44)
    on left: 20 21, on right: 17 20
stmt (45)
    on left: 22 23 24 25 26 27, on right: 20 30 31 32
exp_stmt (46)
    on left: 28 29, on right: 22
if_stmt (47)
    on left: 30 31, on right: 24
while_stmt (48)
    on left: 32, on right: 25
return_stmt (49)
    on left: 33 34, on right: 26
exp (50)
    on left: 35 36, on right: 28 30 31 32 34 35 38 55 63 64
var (51)
    on left: 37 38, on right: 35 56
simple_exp (52)
    on left: 39 40, on right: 36
relop (53)
    on left: 41 42 43 44 45 46, on right: 39
add_exp (54)
    on left: 47 48, on right: 39 40 47
addop (55)
    on left: 49 50, on right: 47
term (56)
    on left: 51 52, on right: 47 48 51
mulop (57)
    on left: 53 54, on right: 51
factor (58)
    on left: 55 56 57 58 59, on right: 51 52
call (59)
    on left: 60, on right: 57
args (60)
    on left: 61 62, on right: 60
arg_list (61)
    on left: 63 64, on right: 61 63


state 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    program    go to state 3
    decl_list  go to state 4
    decl       go to state 5
    var_decl   go to state 6
    type       go to state 7
    func_decl  go to state 8


state 1

    8 type: INT .

    $default  reduce using rule 8 (type)


state 2

    9 type: VOID .

    $default  reduce using rule 9 (type)


state 3

    0 $accept: program . $end

    $end  shift, and go to state 9


state 4

    1 program: decl_list .
    2 decl_list: decl_list . decl

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 1 (program)

    decl       go to state 10
    var_decl   go to state 6
    type       go to state 7
    func_decl  go to state 8


state 5

    3 decl_list: decl .

    $default  reduce using rule 3 (decl_list)


state 6

    4 decl: var_decl .

    $default  reduce using rule 4 (decl)


state 7

    6 var_decl: type . ID SEMI
    7         | type . ID LBRACKET NUM RBRACKET SEMI
   10 func_decl: type . ID LPAREN params RPAREN compound

    ID  shift, and go to state 11


state 8

    5 decl: func_decl .

    $default  reduce using rule 5 (decl)


state 9

    0 $accept: program $end .

    $default  accept


state 10

    2 decl_list: decl_list decl .

    $default  reduce using rule 2 (decl_list)


state 11

    6 var_decl: type ID . SEMI
    7         | type ID . LBRACKET NUM RBRACKET SEMI
   10 func_decl: type ID . LPAREN params RPAREN compound

    LPAREN    shift, and go to state 12
    LBRACKET  shift, and go to state 13
    SEMI      shift, and go to state 14


state 12

   10 func_decl: type ID LPAREN . params RPAREN compound

    INT   shift, and go to state 1
    VOID  shift, and go to state 15

    type        go to state 16
    params      go to state 17
    param_list  go to state 18
    param       go to state 19


state 13

    7 var_decl: type ID LBRACKET . NUM RBRACKET SEMI

    NUM  shift, and go to state 20


state 14

    6 var_decl: type ID SEMI .

    $default  reduce using rule 6 (var_decl)


state 15

    9 type: VOID .
   12 params: VOID .

    RPAREN    reduce using rule 12 (params)
    $default  reduce using rule 9 (type)


state 16

   15 param: type . ID
   16      | type . ID LBRACKET RBRACKET

    ID  shift, and go to state 21


state 17

   10 func_decl: type ID LPAREN params . RPAREN compound

    RPAREN  shift, and go to state 22


state 18

   11 params: param_list .
   13 param_list: param_list . COMMA param

    COMMA  shift, and go to state 23

    $default  reduce using rule 11 (params)


state 19

   14 param_list: param .

    $default  reduce using rule 14 (param_list)


state 20

    7 var_decl: type ID LBRACKET NUM . RBRACKET SEMI

    RBRACKET  shift, and go to state 24


state 21

   15 param: type ID .
   16      | type ID . LBRACKET RBRACKET

    LBRACKET  shift, and go to state 25

    $default  reduce using rule 15 (param)


state 22

   10 func_decl: type ID LPAREN params RPAREN . compound

    LBRACE  shift, and go to state 26

    compound  go to state 27


state 23

   13 param_list: param_list COMMA . param

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    type   go to state 16
    param  go to state 28


state 24

    7 var_decl: type ID LBRACKET NUM RBRACKET . SEMI

    SEMI  shift, and go to state 29


state 25

   16 param: type ID LBRACKET . RBRACKET

    RBRACKET  shift, and go to state 30


state 26

   17 compound: LBRACE . local_decls stmt_list RBRACE

    $default  reduce using rule 19 (local_decls)

    local_decls  go to state 31


state 27

   10 func_decl: type ID LPAREN params RPAREN compound .

    $default  reduce using rule 10 (func_decl)


state 28

   13 param_list: param_list COMMA param .

    $default  reduce using rule 13 (param_list)


state 29

    7 var_decl: type ID LBRACKET NUM RBRACKET SEMI .

    $default  reduce using rule 7 (var_decl)


state 30

   16 param: type ID LBRACKET RBRACKET .

    $default  reduce using rule 16 (param)


state 31

   17 compound: LBRACE local_decls . stmt_list RBRACE
   18 local_decls: local_decls . var_decl

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 21 (stmt_list)

    var_decl   go to state 32
    type       go to state 33
    stmt_list  go to state 34


state 32

   18 local_decls: local_decls var_decl .

    $default  reduce using rule 18 (local_decls)


state 33

    6 var_decl: type . ID SEMI
    7         | type . ID LBRACKET NUM RBRACKET SEMI

    ID  shift, and go to state 35


state 34

   17 compound: LBRACE local_decls stmt_list . RBRACE
   20 stmt_list: stmt_list . stmt

    error   shift, and go to state 36
    IF      shift, and go to state 37
    WHILE   shift, and go to state 38
    RETURN  shift, and go to state 39
    ID      shift, and go to state 40
    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 42
    LBRACE  shift, and go to state 26
    RBRACE  shift, and go to state 43
    SEMI    shift, and go to state 44

    compound     go to state 45
    stmt         go to state 46
    exp_stmt     go to state 47
    if_stmt      go to state 48
    while_stmt   go to state 49
    return_stmt  go to state 50
    exp          go to state 51
    var          go to state 52
    simple_exp   go to state 53
    add_exp      go to state 54
    term         go to state 55
    factor       go to state 56
    call         go to state 57


state 35

    6 var_decl: type ID . SEMI
    7         | type ID . LBRACKET NUM RBRACKET SEMI

    LBRACKET  shift, and go to state 13
    SEMI      shift, and go to state 14


state 36

   27 stmt: error .
   59 factor: error .

    EQ        reduce using rule 59 (factor)
    NE        reduce using rule 59 (factor)
    LT        reduce using rule 59 (factor)
    LE        reduce using rule 59 (factor)
    GT        reduce using rule 59 (factor)
    GE        reduce using rule 59 (factor)
    PLUS      reduce using rule 59 (factor)
    MINUS     reduce using rule 59 (factor)
    TIMES     reduce using rule 59 (factor)
    OVER      reduce using rule 59 (factor)
    SEMI      reduce using rule 27 (stmt)
    SEMI      [reduce using rule 59 (factor)]
    $default  reduce using rule 27 (stmt)


state 37

   30 if_stmt: IF . LPAREN exp RPAREN stmt
   31        | IF . LPAREN exp RPAREN stmt ELSE stmt

    LPAREN  shift, and go to state 58


state 38

   32 while_stmt: WHILE . LPAREN exp RPAREN stmt

    LPAREN  shift, and go to state 59


state 39

   33 return_stmt: RETURN . SEMI
   34            | RETURN . exp SEMI

    error   shift, and go to state 60
    ID      shift, and go to state 40
    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 42
    SEMI    shift, and go to state 61

    exp         go to state 62
    var         go to state 52
    simple_exp  go to state 53
    add_exp     go to state 54
    term        go to state 55
    factor      go to state 56
    call        go to state 57


state 40

   37 var: ID .
   38    | ID . LBRACKET exp RBRACKET
   60 call: ID . LPAREN args RPAREN

    LPAREN    shift, and go to state 63
    LBRACKET  shift, and go to state 64

    $default  reduce using rule 37 (var)


state 41

   58 factor: NUM .

    $default  reduce using rule 58 (factor)


state 42

   55 factor: LPAREN . exp RPAREN

    error   shift, and go to state 60
    ID      shift, and go to state 40
    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 42

    exp         go to state 65
    var         go to state 52
    simple_exp  go to state 53
    add_exp     go to state 54
    term        go to state 55
    factor      go to state 56
    call        go to state 57


state 43

   17 compound: LBRACE local_decls stmt_list RBRACE .

    $default  reduce using rule 17 (compound)


state 44

   29 exp_stmt: SEMI .

    $default  reduce using rule 29 (exp_stmt)


state 45

   23 stmt: compound .

    $default  reduce using rule 23 (stmt)


state 46

   20 stmt_list: stmt_list stmt .

    $default  reduce using rule 20 (stmt_list)


state 47

   22 stmt: exp_stmt .

    $default  reduce using rule 22 (stmt)


state 48

   24 stmt: if_stmt .

    $default  reduce using rule 24 (stmt)


state 49

   25 stmt: while_stmt .

    $default  reduce using rule 25 (stmt)


state 50

   26 stmt: return_stmt .

    $default  reduce using rule 26 (stmt)


state 51

   28 exp_stmt: exp . SEMI

    SEMI  shift, and go to state 66


state 52

   35 exp: var . ASSIGN exp
   56 factor: var .

    ASSIGN  shift, and go to state 67

    $default  reduce using rule 56 (factor)


state 53

   36 exp: simple_exp .

    $default  reduce using rule 36 (exp)


state 54

   39 simple_exp: add_exp . relop add_exp
   40           | add_exp .
   47 add_exp: add_exp . addop term

    EQ     shift, and go to state 68
    NE     shift, and go to state 69
    LT     shift, and go to state 70
    LE     shift, and go to state 71
    GT     shift, and go to state 72
    GE     shift, and go to state 73
    PLUS   shift, and go to state 74
    MINUS  shift, and go to state 75

    $default  reduce using rule 40 (simple_exp)

    relop  go to state 76
    addop  go to state 77


state 55

   48 add_exp: term .
   51 term: term . mulop factor

    TIMES  shift, and go to state 78
    OVER   shift, and go to state 79

    $default  reduce using rule 48 (add_exp)

    mulop  go to state 80


state 56

   52 term: factor .

    $default  reduce using rule 52 (term)


state 57

   57 factor: call .

    $default  reduce using rule 57 (factor)


state 58

   30 if_stmt: IF LPAREN . exp RPAREN stmt
   31        | IF LPAREN . exp RPAREN stmt ELSE stmt

    error   shift, and go to state 60
    ID      shift, and go to state 40
    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 42

    exp         go to state 81
    var         go to state 52
    simple_exp  go to state 53
    add_exp     go to state 54
    term        go to state 55
    factor      go to state 56
    call        go to state 57


state 59

   32 while_stmt: WHILE LPAREN . exp RPAREN stmt

    error   shift, and go to state 60
    ID      shift, and go to state 40
    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 42

    exp         go to state 82
    var         go to state 52
    simple_exp  go to state 53
    add_exp     go to state 54
    term        go to state 55
    factor      go to state 56
    call        go to state 57


state 60

   59 factor: error .

    $default  reduce using rule 59 (factor)


state 61

   33 return_stmt: RETURN SEMI .

    $default  reduce using rule 33 (return_stmt)


state 62

   34 return_stmt: RETURN exp . SEMI

    SEMI  shift, and go to state 83


state 63

   60 call: ID LPAREN . args RPAREN

    error   shift, and go to state 60
    ID      shift, and go to state 40
    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 42

    RPAREN  reduce using rule 62 (args)

    exp         go to state 84
    var         go to state 52
    simple_exp  go to state 53
    add_exp     go to state 54
    term        go to state 55
    factor      go to state 56
    call        go to state 57
    args        go to state 85
    arg_list    go to state 86


state 64

   38 var: ID LBRACKET . exp RBRACKET

    error   shift, and go to state 60
    ID      shift, and go to state 40
    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 42

    exp         go to state 87
    var         go to state 52
    simple_exp  go to state 53
    add_exp     go to state 54
    term        go to state 55
    factor      go to state 56
    call        go to state 57


state 65

   55 factor: LPAREN exp . RPAREN

    RPAREN  shift, and go to state 88


state 66

   28 exp_stmt: exp SEMI .

    $default  reduce using rule 28 (exp_stmt)


state 67

   35 exp: var ASSIGN . exp

    error   shift, and go to state 60
    ID      shift, and go to state 40
    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 42

    exp         go to state 89
    var         go to state 52
    simple_exp  go to state 53
    add_exp     go to state 54
    term        go to state 55
    factor      go to state 56
    call        go to state 57


state 68

   45 relop: EQ .

    $default  reduce using rule 45 (relop)


state 69

   46 relop: NE .

    $default  reduce using rule 46 (relop)


state 70

   42 relop: LT .

    $default  reduce using rule 42 (relop)


state 71

   41 relop: LE .

    $default  reduce using rule 41 (relop)


state 72

   43 relop: GT .

    $default  reduce using rule 43 (relop)


state 73

   44 relop: GE .

    $default  reduce using rule 44 (relop)


state 74

   49 addop: PLUS .

    $default  reduce using rule 49 (addop)


state 75

   50 addop: MINUS .

    $default  reduce using rule 50 (addop)


state 76

   39 simple_exp: add_exp relop . add_exp

    error   shift, and go to state 60
    ID      shift, and go to state 40
    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 42

    var      go to state 90
    add_exp  go to state 91
    term     go to state 55
    factor   go to state 56
    call     go to state 57


state 77

   47 add_exp: add_exp addop . term

    error   shift, and go to state 60
    ID      shift, and go to state 40
    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 42

    var     go to state 90
    term    go to state 92
    factor  go to state 56
    call    go to state 57


state 78

   53 mulop: TIMES .

    $default  reduce using rule 53 (mulop)


state 79

   54 mulop: OVER .

    $default  reduce using rule 54 (mulop)


state 80

   51 term: term mulop . factor

    error   shift, and go to state 60
    ID      shift, and go to state 40
    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 42

    var     go to state 90
    factor  go to state 93
    call    go to state 57


state 81

   30 if_stmt: IF LPAREN exp . RPAREN stmt
   31        | IF LPAREN exp . RPAREN stmt ELSE stmt

    RPAREN  shift, and go to state 94


state 82

   32 while_stmt: WHILE LPAREN exp . RPAREN stmt

    RPAREN  shift, and go to state 95


state 83

   34 return_stmt: RETURN exp SEMI .

    $default  reduce using rule 34 (return_stmt)


state 84

   64 arg_list: exp .

    $default  reduce using rule 64 (arg_list)


state 85

   60 call: ID LPAREN args . RPAREN

    RPAREN  shift, and go to state 96


state 86

   61 args: arg_list .
   63 arg_list: arg_list . COMMA exp

    COMMA  shift, and go to state 97

    $default  reduce using rule 61 (args)


state 87

   38 var: ID LBRACKET exp . RBRACKET

    RBRACKET  shift, and go to state 98


state 88

   55 factor: LPAREN exp RPAREN .

    $default  reduce using rule 55 (factor)


state 89

   35 exp: var ASSIGN exp .

    $default  reduce using rule 35 (exp)


state 90

   56 factor: var .

    $default  reduce using rule 56 (factor)


state 91

   39 simple_exp: add_exp relop add_exp .
   47 add_exp: add_exp . addop term

    PLUS   shift, and go to state 74
    MINUS  shift, and go to state 75

    $default  reduce using rule 39 (simple_exp)

    addop  go to state 77


state 92

   47 add_exp: add_exp addop term .
   51 term: term . mulop factor

    TIMES  shift, and go to state 78
    OVER   shift, and go to state 79

    $default  reduce using rule 47 (add_exp)

    mulop  go to state 80


state 93

   51 term: term mulop factor .

    $default  reduce using rule 51 (term)


state 94

   30 if_stmt: IF LPAREN exp RPAREN . stmt
   31        | IF LPAREN exp RPAREN . stmt ELSE stmt

    error   shift, and go to state 36
    IF      shift, and go to state 37
    WHILE   shift, and go to state 38
    RETURN  shift, and go to state 39
    ID      shift, and go to state 40
    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 42
    LBRACE  shift, and go to state 26
    SEMI    shift, and go to state 44

    compound     go to state 45
    stmt         go to state 99
    exp_stmt     go to state 47
    if_stmt      go to state 48
    while_stmt   go to state 49
    return_stmt  go to state 50
    exp          go to state 51
    var          go to state 52
    simple_exp   go to state 53
    add_exp      go to state 54
    term         go to state 55
    factor       go to state 56
    call         go to state 57


state 95

   32 while_stmt: WHILE LPAREN exp RPAREN . stmt

    error   shift, and go to state 36
    IF      shift, and go to state 37
    WHILE   shift, and go to state 38
    RETURN  shift, and go to state 39
    ID      shift, and go to state 40
    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 42
    LBRACE  shift, and go to state 26
    SEMI    shift, and go to state 44

    compound     go to state 45
    stmt         go to state 100
    exp_stmt     go to state 47
    if_stmt      go to state 48
    while_stmt   go to state 49
    return_stmt  go to state 50
    exp          go to state 51
    var          go to state 52
    simple_exp   go to state 53
    add_exp      go to state 54
    term         go to state 55
    factor       go to state 56
    call         go to state 57


state 96

   60 call: ID LPAREN args RPAREN .

    $default  reduce using rule 60 (call)


state 97

   63 arg_list: arg_list COMMA . exp

    error   shift, and go to state 60
    ID      shift, and go to state 40
    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 42

    exp         go to state 101
    var         go to state 52
    simple_exp  go to state 53
    add_exp     go to state 54
    term        go to state 55
    factor      go to state 56
    call        go to state 57


state 98

   38 var: ID LBRACKET exp RBRACKET .

    $default  reduce using rule 38 (var)


state 99

   30 if_stmt: IF LPAREN exp RPAREN stmt .
   31        | IF LPAREN exp RPAREN stmt . ELSE stmt

    ELSE  shift, and go to state 102

    ELSE      [reduce using rule 30 (if_stmt)]
    $default  reduce using rule 30 (if_stmt)


state 100

   32 while_stmt: WHILE LPAREN exp RPAREN stmt .

    $default  reduce using rule 32 (while_stmt)


state 101

   63 arg_list: arg_list COMMA exp .

    $default  reduce using rule 63 (arg_list)


state 102

   31 if_stmt: IF LPAREN exp RPAREN stmt ELSE . stmt

    error   shift, and go to state 36
    IF      shift, and go to state 37
    WHILE   shift, and go to state 38
    RETURN  shift, and go to state 39
    ID      shift, and go to state 40
    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 42
    LBRACE  shift, and go to state 26
    SEMI    shift, and go to state 44

    compound     go to state 45
    stmt         go to state 103
    exp_stmt     go to state 47
    if_stmt      go to state 48
    while_stmt   go to state 49
    return_stmt  go to state 50
    exp          go to state 51
    var          go to state 52
    simple_exp   go to state 53
    add_exp      go to state 54
    term         go to state 55
    factor       go to state 56
    call         go to state 57


state 103

   31 if_stmt: IF LPAREN exp RPAREN stmt ELSE stmt .

    $default  reduce using rule 31 (if_stmt)
